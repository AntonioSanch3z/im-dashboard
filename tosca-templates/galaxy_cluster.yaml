tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - ec3_custom_types: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/custom_types.yaml

description: >
  TOSCA for launching a Galaxy portal with an SLURM Virtual Cluster.

metadata:
  display_name: Deploy a Galaxy portal in a SLURM cluster
  icon: https://github.com/grycap/im-dashboard/raw/master/tosca-templates/images/galaxy_slurm.png


topology_template:
  inputs:
    wn_num:
      type: integer
      description: Number of WNs in the cluster
      default: 1
      required: yes
    fe_cpus:
      type: integer
      description: Number of CPUs for the front-end node
      default: 1
      required: yes
      constraints:
      - valid_values: [ 1, 2, 4, 8 ]
    fe_mem:
      type: scalar-unit.size
      description: Amount of Memory for the front-end node
      default: 4 GB
      required: yes
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB ]
    wn_cpus:
      type: integer
      description: Number of CPUs for the WNs
      default: 1
      required: yes
      constraints:
      - valid_values: [ 1, 2, 4, 8 ]
    wn_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 2 GB
      required: yes
      constraints:
      - valid_values: [ 2 GB, 4 GB, 8 GB, 16 GB ]

    admin_email:
      type: string
      description: Email of the Galaxy admin user
      default: admin@admin.com
    admin_password:
      type: string
      description: Password of the Galaxy admin user
      default: adminpass

  node_templates:

    galaxy_portal:
      type: tosca.nodes.indigo.GalaxyPortal
      capabilities:
        endpoint:
          properties:
            port: 8443
            protocol: tcp
      properties:
        admin_email: { get_input: admin_email }
        admin_password: { get_input: admin_password }
      requirements:
        - lrms: lrms_front_end
        - host: lrms_server

    lrms_front_end:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Slurm
      properties:
        wn_ips: { get_attribute: [ lrms_wn, private_address ] }
      requirements:
        - host: lrms_server

    lrms_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: slurmserver
            network_name: PUBLIC
        host:
          properties:
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
        os:
          properties:
            distribution: ubuntu
            type: linux

    wn_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Slurm
      properties:
        front_end_ip: { get_attribute: [ lrms_server, private_address, 0 ] }
        public_front_end_ip: { get_attribute: [ lrms_server, public_address, 0 ] }
      requirements:
        - host: lrms_wn

    galaxy_wn:
      type: tosca.nodes.indigo.GalaxyWN
      properties:
        front_end_ip: { get_attribute: [ lrms_server, private_address, 0 ] }
      requirements:
        - host: lrms_wn
        - dependency: galaxy_portal

    lrms_wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: { get_input: wn_num }
        host:
          properties:
            num_cpus: { get_input: wn_cpus }
            mem_size: { get_input: wn_mem }
        os:
          properties:
            distribution: ubuntu
            type: linux

  outputs:
    galaxy_url:
      value: { concat: [ 'https://', get_attribute: [ lrms_server, public_address, 0 ], ':8443/' ] }
    cluster_ip:
      value: { get_attribute: [ lrms_server, public_address, 0 ] }
    cluster_creds:
      value: { get_attribute: [ lrms_server, endpoint, credential, 0 ] }
