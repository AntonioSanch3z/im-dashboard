tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - ec3_custom_types: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/custom_types.yaml

description: > 
  Install ENES Data Space service. on top of a Kubernetes Cluster.
  (Remember to set DNS name in Kubernetes Data).

metadata:
  name: ENES Data Space service
  display_name: ENES Data Space service on top of Kubernetes
  icon: images/eds.png
  vos: ['vo.enes.org']

topology_template:

  inputs:
    fe_cpus:
      type: integer
      description: Number of CPUs for the front-end node
      default: 2
      required: yes
      constraints:
      - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    fe_mem:
      type: scalar-unit.size
      description: Amount of Memory for the front-end node
      default: 4 GB
      required: yes
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]
    fe_instance_type:
      type: string
      description: Flavor name of the front-end node
      default: ""
    disk_size:
      type: scalar-unit.size
      description: Size of the disk to be attached to the FE instance
      default: 10 GB
      constraints:
      - valid_values: [ 10 GB, 20 GB, 50 GB, 100 GB, 200 GB, 500 GB, 1 TB, 2 TB ]
    volume_id:
      type: string
      description: "Or URL of the disk to be attached to the instance (format: ost://api.cloud.ifca.es/<vol_id>"
      default: ""

    wn_num:
      type: integer
      description: Number of WNs in the cluster
      default: 1
      required: yes
    wn_cpus:
      type: integer
      description: Number of CPUs for the WNs
      default: 2
      required: yes
      constraints:
      - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    wn_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 4 GB
      required: yes
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]
    wn_instance_type:
      type: string
      description: Flavor name for the WNs
      default: ""
    wn_disk_size:
      type: scalar-unit.size
      description: Size of the disk to be attached to the WN instances for storing containers
      default: 0 GB
      constraints:
      - valid_values: [ 0 GB, 10 GB, 20 GB, 50 GB, 100 GB, 200 GB, 500 GB, 1 TB, 2 TB ]

    wng_num:
      type: integer
      description: Number of WNs with GPU in the cluster
      default: 0
      required: yes
    wng_cpus:
      type: integer
      description: Number of CPUs for the WNs
      default: 2
      required: yes
      constraints:
      - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    wng_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 4 GB
      required: yes
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]
    wng_instance_type:
      type: string
      description: Flavor name for the GPU WNs
      default: ""
    wng_num_gpus:
      type: integer
      description: Number of GPUs to assing to this VM
      default: 0
      constraints:
      - valid_values: [ 0, 1, 2, 3, 4 ]
    wng_gpu_vendor:
      type: string
      description: GPU Vendor
      default: ''
      constraints:
      - valid_values: [ '', 'NVIDIA', 'AMD' ]
    wng_gpu_model:
      type: string
      description: GPU Model
      default: ''


    wng_disk_size:
      type: scalar-unit.size
      description: Size of the disk to be attached to the GPU WN instances for storing containers
      default: 0 GB
      constraints:
      - valid_values: [ 0 GB, 10 GB, 20 GB, 50 GB, 100 GB, 200 GB, 500 GB, 1 TB, 2 TB ]

    admin_token:
      type: string
      description: Access Token for the Kubernetes admin user
      default: not_very_secret_token
      required: yes
    kube_version:
      type: string
      description: Version of Kubernetes to install
      default: "1.25.8"
      required: yes
    kube_nvidia_support:
      type: boolean
      description: Flag to add NVIDIA support
      default: true
      constraints:
      - valid_values: [ true, false ]
    kube_cert_user_email:
      type: string
      description: Email to be used in the Let's Encrypt issuer
      default: "jhondoe@server.com"
      required: yes
    kube_public_dns_name:
      type: string
      description: DNS name of the public interface of the FE node to generate the certificate
      default: ""
      required: yes

    allowed_cidr:
      type: string
      description: Allowed remote CIDR to extenal access
      default: "0.0.0.0/0"


    storage_size:
      type: string
      description: Size of the ENES data PersistentVolumeClaim
      default: 8 Gi
      required: yes
    jupyterhub_crypt_key:
      type: string
      description: Hex-encoded 32-byte key to crypt jupyterhub ('openssl rand -hex 32')
      default: c924b40b9ae0afba637e297773d27a50c3e9ba4c8a7910f0dd826df1e6c2104d
      required: yes
    enes_oidc_issuer:
      type: string
      description: OIDC Issuer URL
      default: 'https://aai.egi.eu/auth/realms/egi'
      required: yes
      constraints:
      - valid_values:
        - 'https://aai.egi.eu/auth/realms/egi'
        - 'https://aai-demo.egi.eu/auth/realms/egi'
        - 'https://aai-dev.egi.eu/auth/realms/egi'
    enes_client_id:
      type: string
      description: OIDC Client ID
      default: ''
      required: yes
    enes_client_secret:
      type: string
      description: OIDC Client Secret
      default: ''
      required: yes

  node_templates:

    enes:
      type: tosca.nodes.SoftwareComponent
      requirements:
        - host: lrms_front_end
      interfaces:
        Standard:
          configure:
            implementation: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/artifacts/enes/enes.yml
            inputs:
              enes_dns_name: { get_input: kube_public_dns_name }
              storage_size: { get_input: storage_size }
              enes_jupyterhub_crypt_key: { get_input: jupyterhub_crypt_key }
              enes_oidc_issuer: { get_input: enes_oidc_issuer }
              enes_client_secret: { get_input: enes_client_secret }
              enes_client_id: { get_input: enes_client_id }

    lrms_front_end:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Kubernetes
      capabilities:
        endpoint:
          properties:
            ports:
              http_port:
                protocol: tcp
                source: 80
                remote_cidr: { get_input: allowed_cidr }
              https_port:
                protocol: tcp
                source: 443
                remote_cidr: { get_input: allowed_cidr }
              kube_port:
                protocol: tcp
                source: 6443
                remote_cidr: { get_input: allowed_cidr }
      properties:
        admin_username:  kubeuser
        install_nfs_client: true
        admin_token: { get_input: admin_token }
        install_kubeapps: false
        version: { get_input: kube_version }
        nvidia_support: { get_input: kube_nvidia_support }
        cert_manager: true
        cert_user_email: { get_input: kube_cert_user_email }
        public_dns_name: { get_input: kube_public_dns_name}
        cri_runtime: containerd
      requirements:
        - host: front

    front:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: kubeserver
            network_name: PUBLIC
        host:
          properties:
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
            instance_type: { get_input: fe_instance_type }
        os:
          properties:
            distribution: ubuntu
            type: linux
      requirements:
      - local_storage:
          node: fe_block_storage
          relationship:
            type: AttachesTo
            properties:
              location: /pv

    fe_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: disk_size }
        volume_id: { get_input: volume_id }

    wn_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Kubernetes
      properties:
        front_end_ip: { get_attribute: [ front, private_address, 0 ] }
        version: { get_input: kube_version }
        nvidia_support: false
        cri_runtime: containerd
      requirements:
        - host: wn
            
    wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count:  { get_input: wn_num }
        host:
          properties:
            num_cpus: { get_input: wn_cpus }
            mem_size: { get_input: wn_mem }
            instance_type: { get_input: wn_instance_type }
        os:
          properties:
            distribution: ubuntu
            type: linux
      requirements:
      - local_storage:
          node: wn_block_storage
          relationship:
            type: AttachesTo
            properties:
              location: '/var/lib/containerd'

    wn_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: wn_disk_size }

    wng_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Kubernetes
      properties:
        front_end_ip: { get_attribute: [ front, private_address, 0 ] }
        version: { get_input: kube_version }
        nvidia_support: { get_input: kube_nvidia_support }
        cri_runtime: containerd
      requirements:
        - host: wng
            
    wng:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            num_cpus: { get_input: wn_cpus }
            mem_size: { get_input: wn_mem }
            count:  { get_input: wng_num }
            num_gpus: { get_input: num_gpus }
            gpu_vendor: { get_input: gpu_vendor }
            gpu_model: { get_input: gpu_model }
        host:
          properties:
            instance_type: { get_input: wng_instance_type }
        os:
          properties:
            distribution: ubuntu
            type: linux
      requirements:
      - local_storage:
          node: wng_block_storage
          relationship:
            type: AttachesTo
            properties:
              location: '/var/lib/containerd'

    wng_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: wn_disk_size }

  outputs:
    dashboard_endpoint:
      value: { concat: [ 'https://', get_input: kube_public_dns_name, '/dashboard/' ] }
    api_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], ':6443' ] }
    kubeconfig:
      value: { get_attribute: [ front, ansible_output, lrms_front_end_front_conf_front, tasks, kube_conf, output ] }
    enes_web:
      value: { concat: [ 'https://', get_input: kube_public_dns_name, '/' ] }
