tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - ec3_custom_types: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/custom_types.yaml

description: >
  TOSCA template for deploying a Galaxy Server using a local LRMS.

metadata:
  display_name: Deploy a Galaxy portal
  icon: https://github.com/grycap/im-dashboard/raw/master/tosca-templates/images/galaxy.png
  tag: VM

topology_template:

  inputs:
    number_cpus:
      type: integer
      description: Number of cpus required for the Galaxy server
      default: 1
      constraints:
      - valid_values: [ 1, 2, 4, 8, 16, 32, 64 ]
    memory_size:
      type: string
      description: RAM memory required for the Galaxy server
      default: 4 GB
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]

    admin_email:
      type: string
      description: Email of the Galaxy admin user
      default: admin@admin.com
    admin_password:
      type: string
      description: Password of the Galaxy admin user
      default: adminpass

  node_templates:

    galaxy_portal:
      type: tosca.nodes.indigo.GalaxyPortal
      capabilities:
        endpoint:
          properties:
            port: 8080
            protocol: tcp
      properties:
        admin_email: { get_input: admin_email }
        admin_password: { get_input: admin_password }
      requirements:
        - lrms: local_lrms
        - host: galaxy_server

    # type to describe a Galaxy not using any LRMS but using the local system
    local_lrms:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Local
      requirements:
        - host: galaxy_server

    galaxy_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              http_port:
                protocol: tcp
                source: 80
        # Host container properties
        host:
         properties:
           num_cpus: { get_input: number_cpus }
           mem_size: { get_input: memory_size }
        # Guest Operating System properties
        os:
          properties:
            # host Operating System image properties
            type: linux
            distribution: ubuntu

  outputs:
    galaxy_url:
      value: { concat: [ 'https://', get_attribute: [ galaxy_server, public_address, 0 ], ':8443/' ] }
