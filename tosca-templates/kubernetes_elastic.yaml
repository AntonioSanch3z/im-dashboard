tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - ec3_custom_types: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/custom_types.yaml

metadata:
  display_name: Launch an Elastic Kubernetes Virtual Cluster
  icon: images/kubernetes.png
  tag: elastic

description: TOSCA template for launching an Elastic Kubernetes Virtual Cluster.

topology_template:
  inputs:
    wn_num:
      type: integer
      description: Maximum number of WNs in the cluster
      default: 1
      required: yes
    fe_cpus:
      type: integer
      description: Number of CPUs for the front-end node
      default: 2
      required: yes
      constraints:
      - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    fe_mem:
      type: scalar-unit.size
      description: Amount of Memory for the front-end node
      default: 4 GB
      required: yes
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]
    wn_cpus:
      type: integer
      description: Number of CPUs for the WNs
      default: 2
      required: yes
      constraints:
      - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    wn_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 4 GB
      required: yes
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]

    admin_token:
      type: string
      description: Access Token for the Kubernetes admin user
      default: not_very_secret_token
    kube_version:
      type: string
      description: Version of Kubernetes to install
      default: "1.20.2"
      constraints:
      - valid_values: [ "1.20.2", 1.19.7", "1.18.15", "1.17.17" ]
    install_kubeapps:
      type: boolean
      description: Flag to set the kubeapps UI to be installed
      default: true
      constraints:
      - valid_values: [ true, false ]

  node_templates:

    elastic_cluster_front_end:
      type: tosca.nodes.ec3.ElasticCluster
      properties:
        im_auth: ""
        powermanager_plugin: im
      capabilities:
        endpoint:
          properties:
            port: 8800
            protocol: tcp
      requirements:
        - lrms: lrms_front_end
        - wn: wn_node
      interfaces:
        Standard:
          configure:
            implementation: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/artifacts/refresh_install.yml
            inputs:
                CLIENT_ID: ef4d5286-0db3-4c06-87ff-6a27ec97cb85
                CLIENT_SECRET: O-UODpEZZiceW3X47Kx_RDYnd5KJwrm-UzHJK_4Z5tfyKF5RbtbluJcnzeGzPz8xmlfbCWEjKjDj_aBT3HlhlA
          start:
            implementation: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/artifacts/use_external_im.yml

    lrms_front_end:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Kubernetes
      capabilities:
        endpoint:
          properties:
            port: 443
            protocol: tcp
      properties:
        admin_username:  kubeuser
        install_nfs_client: false
        admin_token: { get_input: admin_token }
        install_kubeapps:  { get_input: install_kubeapps }
        version: { get_input: kube_version }
      requirements:
        - host: front

    front:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: kubeserver
            network_name: PUBLIC
        host:
          properties:
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
        os:
          properties:
            distribution: ubuntu
            type: linux

    wn_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Kubernetes
      properties:
        front_end_ip: { get_attribute: [ front, private_address, 0 ] }
        version: { get_input: kube_version }
      capabilities:
        wn:
          properties:
            max_instances: { get_input: wn_num }
            min_instances: 0
      requirements:
        - host: wn

    wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: vnode-#N#.localdomain
        scalable:
          properties:
            count:  1
        host:
          properties:
            num_cpus: { get_input: wn_cpus }
            mem_size: { get_input: wn_mem }
        os:
          properties:
            distribution: ubuntu
            type: linux

  outputs:
    dashboard_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/dashboard/' ] }
    kubeapps_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/kubeapps/' ] }

