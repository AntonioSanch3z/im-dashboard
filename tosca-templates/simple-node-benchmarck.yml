tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/custom_types.yaml

description: >
  Launch a compute node getting the IP and SSH credentials to access via ssh and with tools to benchmark
  EOSC-Synergy sites. Environment variable SITE_NAME will be set based on input parameter specified.

metadata:
  display_name: Start a EOSC-Synergy benchmark virtual machine
  icon: https://github.com/grycap/im-dashboard/raw/master/tosca-templates/images/synergy-bnech.png
  tag: VM

topology_template:

  inputs:        
    num_cpus:
      type: integer
      description: Number of virtual cpus for the VM
      default: 1
      constraints:
      - valid_values: [ 1, 2, 4, 8, 16, 32, 64 ]
    mem_size:
      type: scalar-unit.size
      description: Amount of memory for the VM
      default: 2 GB
      constraints:
      - valid_values: [ 2 GB, 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]
    num_instances:
      type: integer
      description: Number of VMs to be spawned
      default: 1
    site_name:
      type: string
      description: Site name to test
      default: ""
      constraints:
      - valid_values: [ "CESGA", "CETA-GRID", "IFCA-LCG2", "IISAS-FedCloud", "IISAS-GPUCloud", "CESNET-MCC", "NCG-INGRID-PT" ]

  node_templates:

    synegy_test:
      type: tosca.nodes.SoftwareComponent
      requirements:
        - host: simple_node 
      artifacts:
        docker_role:
          file: grycap.docker
      interfaces:
        Standard:
          configure:
            implementation: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/artifacts/synergy_bench.yml
            inputs:
              site_name: { get_input: site_name }

    simple_node:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
        scalable:
          properties:
            count: { get_input: num_instances }
        host:
          properties:
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
        os:
          properties:
            type: linux

  outputs:
    node_ip:
      value: { get_attribute: [ simple_node, public_address, 0 ] }
    node_creds:
      value: { get_attribute: [ simple_node, endpoint, credential, 0 ] }
