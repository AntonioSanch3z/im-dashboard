tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - ec3_custom_types: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/custom_types.yaml

metadata:
  display_name: Launch a FaaS function on top of an OSCAR Virtual Cluster
  icon: images/oscar.png
  web: https://grycap.github.io/oscar/
  tag: FaaS

description: Template for launching a FaaS function on top of an OSCAR Virtual Cluster

topology_template:
  inputs:
    wn_num:
      type: integer
      description: Number of WNs in the OSCAR cluster
      default: 1
      required: yes
    fe_cpus:
      type: integer
      description: Number of CPUs for the front-end node
      default: 2
      required: yes
      constraints:
      - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    fe_mem:
      type: scalar-unit.size
      description: Amount of Memory for the front-end node
      default: 4 GB
      required: yes
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]
    wn_cpus:
      type: integer
      description: Number of CPUs for the WNs
      default: 2
      required: yes
      constraints:
      - valid_values: [ 2, 4, 8, 16, 32, 64 ]
    wn_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 4 GB
      required: yes
      constraints:
      - valid_values: [ 4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB ]

    storage_size:
      type: scalar-unit.size
      description: Size of the extra HD added to the instance
      default: 50 GB
      required: yes
      constraints:
      - valid_values: [ 30 GB, 50 GB, 100 GB ]

    admin_token:
      type: string
      description: Access Token for the Kubernetes admin user
      default: not_very_secret_token
    oscar_password:
      type: string
      description: OSCAR password
      default: oscar123
    minio_password:
      type: string
      description: MinIO password (8 characters min.)
      default: minio123
      constraints:
        - min_length: 8
    cert_user_email:
      type: string
      description: Email to be used in the Let's Encrypt issuer
      default: "jhondoe@server.com"

    function_name:
      type: string
      description: Name of the function
      default: ""
      required: yes
    function_memory:
      type: string
      description: Amount of Memory to assing to the function
      default: 128Mi
      required: yes
    function_cpu:
      type: float
      description: Amount of CPU to assing to the function
      default: 0.1
      required: yes
    function_image:
      type: string
      description: Container Image with the function
      default: ""
      required: yes
    function_script:
      type: string
      description: Script to execute
      default: ""
      required: yes
    function_input:
      type: string
      description: Input path in the MinOI Bucket
      default: "input"
      required: yes
    function_output:
      type: string
      description: Output path in the MinOI Bucket
      default: "output"
      required: yes

  node_templates:

    dns_reg_console_minio:
      type: tosca.nodes.ec3.DNSRegistry
      properties:
        record_name: "console.minio.*"
        domain_name: im.grycap.net
        dns_service_credentials:
          token_type: password
          token: "AK:SK"
      requirements:
        - host: front

    dns_reg_minio:
      type: tosca.nodes.ec3.DNSRegistry
      properties:
        record_name: "minio.*"
        domain_name: im.grycap.net
        dns_service_credentials:
          token_type: password
          token: "AK:SK"
      requirements:
        - host: front

    dns_reg:
      type: tosca.nodes.ec3.DNSRegistry
      properties:
        record_name: "*"
        domain_name: im.grycap.net
        dns_service_credentials:
          token_type: password
          token: "AK:SK"
      requirements:
        - host: front

    oscar_service:
      type: tosca.nodes.aisprint.FaaS.Function
      properties:
        name: { get_input: function_name }
        memory: { get_input: function_memory }
        script: { get_input: function_script }
        cpu: { get_input: function_cpu }
        image: { get_input: function_image }
        input:
          - storage_provider: minio.default
            path: { get_input: function_input }
        output:
          - storage_provider: minio.default
            path: { get_input: function_output }
      requirements:
        - host: oscar
        - dependency: dns_reg

    oscar:
      type: tosca.nodes.indigo.OSCAR
      properties:
        minio_secretkey:  { get_input: minio_password }
        password: { get_input: oscar_password }
        dns_host: { concat: [ get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name] ] }
        minio_dns_host: { concat: [ 'minio.', get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name] ] }
        minio_dns_host_console: { concat: [ 'console.minio.', get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name] ] }
      capabilities:
        endpoint:
          properties:
            ports:
              http_port:
                protocol: tcp
                source: 80
              https_port:
                protocol: tcp
                source: 443
              minio_port:
                protocol: tcp
                source: 30300
      requirements:
        - host: lrms_front_end

    lrms_front_end:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Kubernetes
      capabilities:
        endpoint:
          properties:
            port: 30443
            protocol: tcp
      properties:
        admin_username:  kubeuser
        admin_token: { get_input: admin_token }
        install_kubeapps:  false
        install_metrics: true
        install_nfs_client: true
        install_ingress: true
        version: 1.23.6
        cert_manager: true
        cert_user_email: { get_input: cert_user_email }
        public_dns_name: { concat: [ get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name] ] }
        cert_manager_challenge: dns01
        cert_manager_challenge_dns01_domain: { get_property: [dns_reg, domain_name] }
        cert_manager_challenge_dns01_ak: AK
        cert_manager_challenge_dns01_sk: SK
      requirements:
        - host: front

    front:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: kubeserver
            network_name: PUBLIC
        host:
          properties:
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
        os:
          properties:
            distribution: ubuntu
            type: linux
      requirements:
        - local_storage:
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /pv
                device: hdb

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

    wn_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Kubernetes
      properties:
        front_end_ip: { get_attribute: [ front, private_address, 0 ] }
        version: 1.23.6
      requirements:
        - host: wn

    wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count:  { get_input: wn_num }
        host:
          properties:
            num_cpus: { get_input: wn_cpus }
            mem_size: { get_input: wn_mem }
        os:
          properties:
            distribution: ubuntu
            type: linux

  outputs:
    dashboard_endpoint:
      value: { concat: [ 'https://', get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name], '/dashboard/' ] }
    oscarui_endpoint:
      value: { concat: [ 'https://', get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name], '/' ] }
    minio_endpoint:
      value: { concat: [ 'https://', get_property: [dns_reg_minio, record_name], '.', get_property: [dns_reg_minio, domain_name], '/' ] }
    console_minio_endpoint:
      value: { concat: [ 'https://', get_property: [dns_reg_console_minio, record_name], '.', get_property: [dns_reg_console_minio, domain_name], '/' ] }
